/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CvDTO,
  ImportCvRequest,
} from '../models/index';
import {
    CvDTOFromJSON,
    CvDTOToJSON,
    ImportCvRequestFromJSON,
    ImportCvRequestToJSON,
} from '../models/index';

export interface GetCvRequest {
    authorization: string;
}

export interface ImportCvOperationRequest {
    authorization: string;
    source: string;
    importCvRequest?: ImportCvRequest;
}

export interface SendCvToCienciaVitaeRequest {
    authorization: string;
}

export interface UpdateCvRequest {
    authorization: string;
    cvDTO: CvDTO;
}

/**
 * 
 */
export class CvControllerApi extends runtime.BaseAPI {

    /**
     */
    async getCvRaw(requestParameters: GetCvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CvDTO>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getCv().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/api/cv`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CvDTOFromJSON(jsonValue));
    }

    /**
     */
    async getCv(requestParameters: GetCvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CvDTO> {
        const response = await this.getCvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async importCvRaw(requestParameters: ImportCvOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling importCv().'
            );
        }

        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling importCv().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['source'] != null) {
            queryParameters['source'] = requestParameters['source'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/api/cv/import`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportCvRequestToJSON(requestParameters['importCvRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async importCv(requestParameters: ImportCvOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.importCvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sendCvToCienciaVitaeRaw(requestParameters: SendCvToCienciaVitaeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling sendCvToCienciaVitae().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/api/cv/send`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async sendCvToCienciaVitae(requestParameters: SendCvToCienciaVitaeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.sendCvToCienciaVitaeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCvRaw(requestParameters: UpdateCvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateCv().'
            );
        }

        if (requestParameters['cvDTO'] == null) {
            throw new runtime.RequiredError(
                'cvDTO',
                'Required parameter "cvDTO" was null or undefined when calling updateCv().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/api/cv/update`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CvDTOToJSON(requestParameters['cvDTO']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateCv(requestParameters: UpdateCvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.updateCvRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
