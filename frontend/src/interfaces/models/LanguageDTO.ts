/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LanguageDTO
 */
export interface LanguageDTO {
    /**
     * 
     * @type {number}
     * @memberof LanguageDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LanguageDTO
     */
    language: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageDTO
     */
    comprehension?: LanguageDTOComprehensionEnum;
    /**
     * 
     * @type {string}
     * @memberof LanguageDTO
     */
    reading?: LanguageDTOReadingEnum;
    /**
     * 
     * @type {string}
     * @memberof LanguageDTO
     */
    speaking?: LanguageDTOSpeakingEnum;
    /**
     * 
     * @type {string}
     * @memberof LanguageDTO
     */
    writing?: LanguageDTOWritingEnum;
}


/**
 * @export
 */
export const LanguageDTOComprehensionEnum = {
    Beginner: 'Beginner',
    Elementary: 'Elementary',
    Intermediate: 'Intermediate',
    UpperIntermediate: 'UpperIntermediate',
    Advanced: 'Advanced',
    Proficiency: 'Proficiency'
} as const;
export type LanguageDTOComprehensionEnum = typeof LanguageDTOComprehensionEnum[keyof typeof LanguageDTOComprehensionEnum];

/**
 * @export
 */
export const LanguageDTOReadingEnum = {
    Beginner: 'Beginner',
    Elementary: 'Elementary',
    Intermediate: 'Intermediate',
    UpperIntermediate: 'UpperIntermediate',
    Advanced: 'Advanced',
    Proficiency: 'Proficiency'
} as const;
export type LanguageDTOReadingEnum = typeof LanguageDTOReadingEnum[keyof typeof LanguageDTOReadingEnum];

/**
 * @export
 */
export const LanguageDTOSpeakingEnum = {
    Beginner: 'Beginner',
    Elementary: 'Elementary',
    Intermediate: 'Intermediate',
    UpperIntermediate: 'UpperIntermediate',
    Advanced: 'Advanced',
    Proficiency: 'Proficiency'
} as const;
export type LanguageDTOSpeakingEnum = typeof LanguageDTOSpeakingEnum[keyof typeof LanguageDTOSpeakingEnum];

/**
 * @export
 */
export const LanguageDTOWritingEnum = {
    Beginner: 'Beginner',
    Elementary: 'Elementary',
    Intermediate: 'Intermediate',
    UpperIntermediate: 'UpperIntermediate',
    Advanced: 'Advanced',
    Proficiency: 'Proficiency'
} as const;
export type LanguageDTOWritingEnum = typeof LanguageDTOWritingEnum[keyof typeof LanguageDTOWritingEnum];


/**
 * Check if a given object implements the LanguageDTO interface.
 */
export function instanceOfLanguageDTO(value: object): value is LanguageDTO {
    if (!('language' in value) || value['language'] === undefined) return false;
    return true;
}

export function LanguageDTOFromJSON(json: any): LanguageDTO {
    return LanguageDTOFromJSONTyped(json, false);
}

export function LanguageDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): LanguageDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'language': json['language'],
        'comprehension': json['comprehension'] == null ? undefined : json['comprehension'],
        'reading': json['reading'] == null ? undefined : json['reading'],
        'speaking': json['speaking'] == null ? undefined : json['speaking'],
        'writing': json['writing'] == null ? undefined : json['writing'],
    };
}

export function LanguageDTOToJSON(json: any): LanguageDTO {
    return LanguageDTOToJSONTyped(json, false);
}

export function LanguageDTOToJSONTyped(value?: LanguageDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'language': value['language'],
        'comprehension': value['comprehension'],
        'reading': value['reading'],
        'speaking': value['speaking'],
        'writing': value['writing'],
    };
}

