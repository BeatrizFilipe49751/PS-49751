/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProjectDTO } from './ProjectDTO';
import {
    ProjectDTOFromJSON,
    ProjectDTOFromJSONTyped,
    ProjectDTOToJSON,
    ProjectDTOToJSONTyped,
} from './ProjectDTO';
import type { IdentifierDTO } from './IdentifierDTO';
import {
    IdentifierDTOFromJSON,
    IdentifierDTOFromJSONTyped,
    IdentifierDTOToJSON,
    IdentifierDTOToJSONTyped,
} from './IdentifierDTO';
import type { EducationDTO } from './EducationDTO';
import {
    EducationDTOFromJSON,
    EducationDTOFromJSONTyped,
    EducationDTOToJSON,
    EducationDTOToJSONTyped,
} from './EducationDTO';
import type { ProfessionalExperienceDTO } from './ProfessionalExperienceDTO';
import {
    ProfessionalExperienceDTOFromJSON,
    ProfessionalExperienceDTOFromJSONTyped,
    ProfessionalExperienceDTOToJSON,
    ProfessionalExperienceDTOToJSONTyped,
} from './ProfessionalExperienceDTO';
import type { AddressDTO } from './AddressDTO';
import {
    AddressDTOFromJSON,
    AddressDTOFromJSONTyped,
    AddressDTOToJSON,
    AddressDTOToJSONTyped,
} from './AddressDTO';
import type { ActivityDTO } from './ActivityDTO';
import {
    ActivityDTOFromJSON,
    ActivityDTOFromJSONTyped,
    ActivityDTOToJSON,
    ActivityDTOToJSONTyped,
} from './ActivityDTO';
import type { DistinctionDTO } from './DistinctionDTO';
import {
    DistinctionDTOFromJSON,
    DistinctionDTOFromJSONTyped,
    DistinctionDTOToJSON,
    DistinctionDTOToJSONTyped,
} from './DistinctionDTO';
import type { AuthorDTO } from './AuthorDTO';
import {
    AuthorDTOFromJSON,
    AuthorDTOFromJSONTyped,
    AuthorDTOToJSON,
    AuthorDTOToJSONTyped,
} from './AuthorDTO';
import type { LanguageDTO } from './LanguageDTO';
import {
    LanguageDTOFromJSON,
    LanguageDTOFromJSONTyped,
    LanguageDTOToJSON,
    LanguageDTOToJSONTyped,
} from './LanguageDTO';
import type { ProductionDTO } from './ProductionDTO';
import {
    ProductionDTOFromJSON,
    ProductionDTOFromJSONTyped,
    ProductionDTOToJSON,
    ProductionDTOToJSONTyped,
} from './ProductionDTO';
import type { WebsiteDTO } from './WebsiteDTO';
import {
    WebsiteDTOFromJSON,
    WebsiteDTOFromJSONTyped,
    WebsiteDTOToJSON,
    WebsiteDTOToJSONTyped,
} from './WebsiteDTO';
import type { EmailDTO } from './EmailDTO';
import {
    EmailDTOFromJSON,
    EmailDTOFromJSONTyped,
    EmailDTOToJSON,
    EmailDTOToJSONTyped,
} from './EmailDTO';
import type { PhoneDTO } from './PhoneDTO';
import {
    PhoneDTOFromJSON,
    PhoneDTOFromJSONTyped,
    PhoneDTOToJSON,
    PhoneDTOToJSONTyped,
} from './PhoneDTO';

/**
 * 
 * @export
 * @interface CvDTO
 */
export interface CvDTO {
    /**
     * 
     * @type {string}
     * @memberof CvDTO
     */
    summary?: string;
    /**
     * 
     * @type {Array<IdentifierDTO>}
     * @memberof CvDTO
     */
    identifiers: Array<IdentifierDTO>;
    /**
     * 
     * @type {Array<LanguageDTO>}
     * @memberof CvDTO
     */
    languages: Array<LanguageDTO>;
    /**
     * 
     * @type {Array<DistinctionDTO>}
     * @memberof CvDTO
     */
    distinctions: Array<DistinctionDTO>;
    /**
     * 
     * @type {Array<EducationDTO>}
     * @memberof CvDTO
     */
    educations: Array<EducationDTO>;
    /**
     * 
     * @type {Array<AddressDTO>}
     * @memberof CvDTO
     */
    addresses: Array<AddressDTO>;
    /**
     * 
     * @type {Array<EmailDTO>}
     * @memberof CvDTO
     */
    emails: Array<EmailDTO>;
    /**
     * 
     * @type {Array<PhoneDTO>}
     * @memberof CvDTO
     */
    phones: Array<PhoneDTO>;
    /**
     * 
     * @type {Array<WebsiteDTO>}
     * @memberof CvDTO
     */
    websites: Array<WebsiteDTO>;
    /**
     * 
     * @type {Array<ProjectDTO>}
     * @memberof CvDTO
     */
    projects: Array<ProjectDTO>;
    /**
     * 
     * @type {Array<ProductionDTO>}
     * @memberof CvDTO
     */
    productions: Array<ProductionDTO>;
    /**
     * 
     * @type {Array<ProfessionalExperienceDTO>}
     * @memberof CvDTO
     */
    profExp: Array<ProfessionalExperienceDTO>;
    /**
     * 
     * @type {Array<ActivityDTO>}
     * @memberof CvDTO
     */
    activities: Array<ActivityDTO>;
    /**
     * 
     * @type {Array<AuthorDTO>}
     * @memberof CvDTO
     */
    authors: Array<AuthorDTO>;
}

/**
 * Check if a given object implements the CvDTO interface.
 */
export function instanceOfCvDTO(value: object): value is CvDTO {
    if (!('identifiers' in value) || value['identifiers'] === undefined) return false;
    if (!('languages' in value) || value['languages'] === undefined) return false;
    if (!('distinctions' in value) || value['distinctions'] === undefined) return false;
    if (!('educations' in value) || value['educations'] === undefined) return false;
    if (!('addresses' in value) || value['addresses'] === undefined) return false;
    if (!('emails' in value) || value['emails'] === undefined) return false;
    if (!('phones' in value) || value['phones'] === undefined) return false;
    if (!('websites' in value) || value['websites'] === undefined) return false;
    if (!('projects' in value) || value['projects'] === undefined) return false;
    if (!('productions' in value) || value['productions'] === undefined) return false;
    if (!('profExp' in value) || value['profExp'] === undefined) return false;
    if (!('activities' in value) || value['activities'] === undefined) return false;
    if (!('authors' in value) || value['authors'] === undefined) return false;
    return true;
}

export function CvDTOFromJSON(json: any): CvDTO {
    return CvDTOFromJSONTyped(json, false);
}

export function CvDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CvDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'summary': json['summary'] == null ? undefined : json['summary'],
        'identifiers': ((json['identifiers'] as Array<any>).map(IdentifierDTOFromJSON)),
        'languages': ((json['languages'] as Array<any>).map(LanguageDTOFromJSON)),
        'distinctions': ((json['distinctions'] as Array<any>).map(DistinctionDTOFromJSON)),
        'educations': ((json['educations'] as Array<any>).map(EducationDTOFromJSON)),
        'addresses': ((json['addresses'] as Array<any>).map(AddressDTOFromJSON)),
        'emails': ((json['emails'] as Array<any>).map(EmailDTOFromJSON)),
        'phones': ((json['phones'] as Array<any>).map(PhoneDTOFromJSON)),
        'websites': ((json['websites'] as Array<any>).map(WebsiteDTOFromJSON)),
        'projects': ((json['projects'] as Array<any>).map(ProjectDTOFromJSON)),
        'productions': ((json['productions'] as Array<any>).map(ProductionDTOFromJSON)),
        'profExp': ((json['profExp'] as Array<any>).map(ProfessionalExperienceDTOFromJSON)),
        'activities': ((json['activities'] as Array<any>).map(ActivityDTOFromJSON)),
        'authors': ((json['authors'] as Array<any>).map(AuthorDTOFromJSON)),
    };
}

export function CvDTOToJSON(json: any): CvDTO {
    return CvDTOToJSONTyped(json, false);
}

export function CvDTOToJSONTyped(value?: CvDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'summary': value['summary'],
        'identifiers': ((value['identifiers'] as Array<any>).map(IdentifierDTOToJSON)),
        'languages': ((value['languages'] as Array<any>).map(LanguageDTOToJSON)),
        'distinctions': ((value['distinctions'] as Array<any>).map(DistinctionDTOToJSON)),
        'educations': ((value['educations'] as Array<any>).map(EducationDTOToJSON)),
        'addresses': ((value['addresses'] as Array<any>).map(AddressDTOToJSON)),
        'emails': ((value['emails'] as Array<any>).map(EmailDTOToJSON)),
        'phones': ((value['phones'] as Array<any>).map(PhoneDTOToJSON)),
        'websites': ((value['websites'] as Array<any>).map(WebsiteDTOToJSON)),
        'projects': ((value['projects'] as Array<any>).map(ProjectDTOToJSON)),
        'productions': ((value['productions'] as Array<any>).map(ProductionDTOToJSON)),
        'profExp': ((value['profExp'] as Array<any>).map(ProfessionalExperienceDTOToJSON)),
        'activities': ((value['activities'] as Array<any>).map(ActivityDTOToJSON)),
        'authors': ((value['authors'] as Array<any>).map(AuthorDTOToJSON)),
    };
}

