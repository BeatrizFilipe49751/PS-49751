/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ActivityDTO
 */
export interface ActivityDTO {
    /**
     * 
     * @type {number}
     * @memberof ActivityDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ActivityDTO
     */
    type: ActivityDTOTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ActivityDTO
     */
    title: string;
    /**
     * 
     * @type {Date}
     * @memberof ActivityDTO
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof ActivityDTO
     */
    student?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityDTO
     */
    institution?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityDTO
     */
    course?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityDTO
     */
    courseCode?: string;
    /**
     * 
     * @type {Date}
     * @memberof ActivityDTO
     */
    endDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ActivityDTO
     */
    role?: ActivityDTORoleEnum;
    /**
     * 
     * @type {string}
     * @memberof ActivityDTO
     */
    degree?: ActivityDTODegreeEnum;
}


/**
 * @export
 */
export const ActivityDTOTypeEnum = {
    Consulting: 'Consulting',
    Event: 'Event',
    Supervision: 'Supervision',
    AcademicJury: 'AcademicJury',
    SubjectTaught: 'SubjectTaught'
} as const;
export type ActivityDTOTypeEnum = typeof ActivityDTOTypeEnum[keyof typeof ActivityDTOTypeEnum];

/**
 * @export
 */
export const ActivityDTORoleEnum = {
    Supervisor: 'Supervisor',
    CoSupervisor: 'CoSupervisor'
} as const;
export type ActivityDTORoleEnum = typeof ActivityDTORoleEnum[keyof typeof ActivityDTORoleEnum];

/**
 * @export
 */
export const ActivityDTODegreeEnum = {
    Masters: 'MASTERS',
    Doctorate: 'DOCTORATE',
    Postdoc: 'POSTDOC',
    Specialization: 'SPECIALIZATION',
    Research: 'RESEARCH',
    Bachelor: 'BACHELOR',
    Other: 'OTHER'
} as const;
export type ActivityDTODegreeEnum = typeof ActivityDTODegreeEnum[keyof typeof ActivityDTODegreeEnum];


/**
 * Check if a given object implements the ActivityDTO interface.
 */
export function instanceOfActivityDTO(value: object): value is ActivityDTO {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    return true;
}

export function ActivityDTOFromJSON(json: any): ActivityDTO {
    return ActivityDTOFromJSONTyped(json, false);
}

export function ActivityDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'],
        'title': json['title'],
        'date': (new Date(json['date'])),
        'student': json['student'] == null ? undefined : json['student'],
        'institution': json['institution'] == null ? undefined : json['institution'],
        'course': json['course'] == null ? undefined : json['course'],
        'courseCode': json['courseCode'] == null ? undefined : json['courseCode'],
        'endDate': json['endDate'] == null ? undefined : (new Date(json['endDate'])),
        'role': json['role'] == null ? undefined : json['role'],
        'degree': json['degree'] == null ? undefined : json['degree'],
    };
}

export function ActivityDTOToJSON(json: any): ActivityDTO {
    return ActivityDTOToJSONTyped(json, false);
}

export function ActivityDTOToJSONTyped(value?: ActivityDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'title': value['title'],
        'date': ((value['date']).toISOString().substring(0,10)),
        'student': value['student'],
        'institution': value['institution'],
        'course': value['course'],
        'courseCode': value['courseCode'],
        'endDate': value['endDate'] == null ? undefined : ((value['endDate']).toISOString().substring(0,10)),
        'role': value['role'],
        'degree': value['degree'],
    };
}

