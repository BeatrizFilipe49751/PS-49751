/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DistinctionDTO
 */
export interface DistinctionDTO {
    /**
     * 
     * @type {number}
     * @memberof DistinctionDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DistinctionDTO
     */
    type: DistinctionDTOTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DistinctionDTO
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof DistinctionDTO
     */
    year: number;
    /**
     * 
     * @type {string}
     * @memberof DistinctionDTO
     */
    promotingEntity?: string;
}


/**
 * @export
 */
export const DistinctionDTOTypeEnum = {
    Award: 'Award',
    Title: 'Title',
    Other: 'Other'
} as const;
export type DistinctionDTOTypeEnum = typeof DistinctionDTOTypeEnum[keyof typeof DistinctionDTOTypeEnum];


/**
 * Check if a given object implements the DistinctionDTO interface.
 */
export function instanceOfDistinctionDTO(value: object): value is DistinctionDTO {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('year' in value) || value['year'] === undefined) return false;
    return true;
}

export function DistinctionDTOFromJSON(json: any): DistinctionDTO {
    return DistinctionDTOFromJSONTyped(json, false);
}

export function DistinctionDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): DistinctionDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'],
        'name': json['name'],
        'year': json['year'],
        'promotingEntity': json['promotingEntity'] == null ? undefined : json['promotingEntity'],
    };
}

export function DistinctionDTOToJSON(json: any): DistinctionDTO {
    return DistinctionDTOToJSONTyped(json, false);
}

export function DistinctionDTOToJSONTyped(value?: DistinctionDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'name': value['name'],
        'year': value['year'],
        'promotingEntity': value['promotingEntity'],
    };
}

