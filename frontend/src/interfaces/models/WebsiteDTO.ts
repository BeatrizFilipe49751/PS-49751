/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WebsiteDTO
 */
export interface WebsiteDTO {
    /**
     * 
     * @type {number}
     * @memberof WebsiteDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof WebsiteDTO
     */
    type: WebsiteDTOTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof WebsiteDTO
     */
    url: string;
}


/**
 * @export
 */
export const WebsiteDTOTypeEnum = {
    Blog: 'Blog',
    Feed: 'Feed',
    Personal: 'Personal',
    SocialMedia: 'SocialMedia',
    Professional: 'Professional',
    Scholar: 'Scholar'
} as const;
export type WebsiteDTOTypeEnum = typeof WebsiteDTOTypeEnum[keyof typeof WebsiteDTOTypeEnum];


/**
 * Check if a given object implements the WebsiteDTO interface.
 */
export function instanceOfWebsiteDTO(value: object): value is WebsiteDTO {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function WebsiteDTOFromJSON(json: any): WebsiteDTO {
    return WebsiteDTOFromJSONTyped(json, false);
}

export function WebsiteDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebsiteDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'],
        'url': json['url'],
    };
}

export function WebsiteDTOToJSON(json: any): WebsiteDTO {
    return WebsiteDTOToJSONTyped(json, false);
}

export function WebsiteDTOToJSONTyped(value?: WebsiteDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'url': value['url'],
    };
}

